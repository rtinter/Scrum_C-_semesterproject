variables:
  CCACHE_BASEDIR: $CI_PROJECT_DIR
  CCACHE_DIR: $CI_PROJECT_DIR/ccache
  CCACHE_COMPILERCHECK: content

stages:
  - build
  - prepare
  - release

# Windows Build Job
build_windows:
  stage: build
  tags: [windows]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - mkdir build
  script:
    - cd build
    - cmake -G "MinGW Makefiles" ..
    - mingw32-make

# Windows Prepare Job
prepare_windows:
  stage: prepare
  tags: [windows]
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - mkdir build
  script:
    - cd build
    - cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
    - mingw32-make
    - mkdir -p output
    - echo "Current directory: $(pwd)"
    - echo "Listing files in build directory:"
    - ls -la
    - cp bin/*.exe output/
    - cp bin/*.dll output/
    - echo "Listing files in output directory:"
    - ls -la output
    - cd output
    - zip -r ../athena-release-$CI_COMMIT_TAG-win64.zip .
  artifacts:
    paths:
      - athena-release-$CI_COMMIT_TAG-win64.zip

# Windows Release Job
release_windows:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  script:
    - echo "release application..."
    - echo "Application successfully released."
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: prepare_windows
      artifacts: true
  release:
    name: 'Athena $CI_COMMIT_TAG (Windows)'
    description: '$CI_COMMIT_TAG_MESSAGE'
    tag_name: '$CI_COMMIT_TAG-$(date +%s)'  # Ensure the tag is unique
    assets:
      links:
        - name: 'athena-release-$CI_COMMIT_TAG-win64'
          url: '${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/file/athena-release-$CI_COMMIT_TAG-win64.zip'

# Linux Build Job
build_linux:
  stage: build
  image: gcc
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - apt update && apt -y install cmake
    - apt -y install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libxinerama-dev libxi-dev ccache clang-tidy zip
    - ccache --zero-stats
  script:
    - chmod +x ./build.sh
    - ./build.sh Build-Only
  cache:
    key: ccache-$CI_JOB_NAME
    paths:
      - $CCACHE_DIR

# Linux Prepare Job
prepare_linux:
  image: gcc
  stage: prepare
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apt update && apt -y install cmake
    - apt -y install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libxinerama-dev libxi-dev ccache clang-tidy zip
    - ccache --zero-stats
  script:
    - chmod +x ./build.sh
    - ./build.sh Release
    - mkdir -p output
    - cp bin/Athena output/  # Ensure correct path to binary
    - cd output
    - zip -r ../athena-release-$CI_COMMIT_TAG-linux.zip .
  cache:
    key: ccache-$CI_JOB_NAME
    paths:
      - $CCACHE_DIR
  artifacts:
    paths:
      - athena-release-$CI_COMMIT_TAG-linux.zip
    reports:
      dotenv: build.env

# Linux Release Job
release_linux:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  script:
    - echo "release application..."
    - echo "Application successfully released."
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: prepare_linux
      artifacts: true
  release:
    name: 'Athena $CI_COMMIT_TAG (Linux)'
    description: '$CI_COMMIT_TAG_MESSAGE'
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'athena-release-$CI_COMMIT_TAG-linux'
          url: '${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/file/athena-release-$CI_COMMIT_TAG-linux.zip'
