variables:
  CCACHE_BASEDIR: $CI_PROJECT_DIR
  CCACHE_DIR: $CI_PROJECT_DIR/ccache
  CCACHE_COMPILERCHECK: content
  NAME_ZIP: dist.zip
  PACKAGE_REGISTRY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic

stages:
  - build
  - prepare
  - release

# Linux Build Job
build:
  stage: build
  image: gcc
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || ($CI_PIPELINE_SOURCE == 'merge_request_event' && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"))
  before_script:
    - apt update && apt -y install cmake
    - apt -y install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libxinerama-dev libxi-dev ccache clang-tidy zip
    - ccache --zero-stats
  script:
    - chmod +x ./build.sh
    - ./build.sh Build-Only
  cache:
    key: ccache-$CI_JOB_NAME
    paths:
      - $CCACHE_DIR

# Linux Prepare Job
prepare:
  image: gcc
  stage: prepare
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apt update && apt -y install cmake
    - apt -y install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libxinerama-dev libxi-dev ccache clang-tidy zip
    - ccache --zero-stats
  script:
    - chmod +x ./build.sh
    - ./build.sh Release
    - mkdir -p output
    - cp -r bin/* output/
    - cd output
    - zip -r ../athena-release-$CI_COMMIT_TAG-linux.zip .
    - cd ..
  cache:
    key: ccache-$CI_JOB_NAME
    paths:
      - $CCACHE_DIR
  artifacts:
    paths:
      - athena-release-$CI_COMMIT_TAG-linux.zip
    reports:
      dotenv: build.env

# Linux Release Job
release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  script:
    - echo "release application (Linux)..."
    - ls -lh
    - echo "Releasing Linux artifacts..."
    - release-cli create --name "Athena $CI_COMMIT_TAG (Linux)" --description "$CI_COMMIT_TAG_MESSAGE" --tag-name "$CI_COMMIT_TAG-linux" --assets-link "{\"url\":\"${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/file/athena-release-$CI_COMMIT_TAG-linux.zip\",\"name\":\"athena-release-$CI_COMMIT_TAG-linux\"}"
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: prepare
      artifacts: true

# Windows Build Job
build_windows:
  stage: build
  tags: [windows]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - mkdir build
    - cd build
    - cmake -G "MinGW Makefiles" ..
    - mingw32-make
    - mkdir dist
    - cp -r bin/* dist
    - zip -r $NAME_ZIP dist
    - mv $NAME_ZIP ../.
  artifacts:
    expire_in: 10min
    paths:
      - $NAME_ZIP

# Windows Prepare Job
prepare_windows:
  stage: prepare
  tags: [windows]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir build
    - cd build
    - cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
    - mingw32-make
    - mkdir -p output
    - cp -r bin/* output/
    - cd output
    - zip -r ../athena-release-$CI_COMMIT_TAG-win64.zip .
    - cd ..
    - mv athena-release-$CI_COMMIT_TAG-win64.zip $CI_PROJECT_DIR/
  artifacts:
    paths:
      - $CI_PROJECT_DIR/athena-release-$CI_COMMIT_TAG-win64.zip

# Windows Release Job
release_windows:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  script:
    - echo "release application (Windows)..."
    - ls -lh
    - echo "Releasing Windows artifacts..."
    - release-cli create --name "Athena $CI_COMMIT_TAG (Windows)" --description "$CI_COMMIT_TAG_MESSAGE" --tag-name "$CI_COMMIT_TAG-win64" --assets-link "{\"url\":\"${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/file/athena-release-$CI_COMMIT_TAG-win64.zip\",\"name\":\"athena-release-$CI_COMMIT_TAG-win64\"}"
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: prepare_windows
      artifacts: true
