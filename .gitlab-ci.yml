variables:
  NAME_ZIP: dist.zip
  PACKAGE_REGISTRY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic
  NUM_CORES: 8

stages:
  - build
  - prepare
  - publish
  - release

# Linux Build Job
build:
  stage: build
  image: gcc
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || ($CI_PIPELINE_SOURCE == 'merge_request_event' && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"))
  before_script:
    - apt update && apt -y install cmake
    - apt -y install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libxinerama-dev libxi-dev clang-tidy zip
  script:
    - chmod +x ./build.sh
    - ./build.sh Build-Only

prepare:
  image: gcc
  stage: prepare
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apt update && apt -y install cmake
    - apt -y install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libxinerama-dev libxi-dev clang-tidy zip
  script:
    - chmod +x ./build.sh
    - ./build.sh Release
  artifacts:
    paths:
      - athena-release-$CI_COMMIT_TAG-linux.zip

# Windows Build Job
# build_windows:
#   stage: build
#   tags: [windows]
#   rules:
#     - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == 'merge_request_event'
#   script:
#     - mkdir build
#     - cd build
#     - cmake -G "MinGW Makefiles" ..
#     - mingw32-make --jobs=$NUM_CORES

# Windows Prepare Job
# prepare_windows:
#   stage: prepare
#   tags: [windows]
#   rules:
#     - if: $CI_COMMIT_TAG
#   script:
#     - mkdir build
#     - cd build
#     - cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
#     - mingw32-make --jobs=$NUM_CORES
#     - cd bin
#     - zip -r ../../athena-release-$CI_COMMIT_TAG-win64.zip ./*
#     - mv ../../athena-release-$CI_COMMIT_TAG-win64.zip $CI_PROJECT_DIR/
#   artifacts:
#     paths:
#       - $CI_PROJECT_DIR/athena-release-$CI_COMMIT_TAG-win64.zip

publish_job:
  stage: publish
  image: curlimages/curl:latest
  script:
    - |
      # Commenting out the Windows upload line
      # curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "$CI_PROJECT_DIR/athena-release-$CI_COMMIT_TAG-win64.zip" "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/win-x86_64/athena-release-$CI_COMMIT_TAG-win64.zip"
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "$CI_PROJECT_DIR/athena-release-$CI_COMMIT_TAG-linux.zip" "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/linux-x86_64/athena-release-$CI_COMMIT_TAG-linux.zip"
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v[0-9]\.[0-9]\.[0-9](-rc.+)?/'
      when: always
      needs: [prepare]

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "starting release"
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: 'Release created using the release-cli.'
    assets:
      links:
        # Commenting out the Windows release link
        # - name: deploy-win-${CI_COMMIT_TAG}
        #   url: ${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/win-x86_64/athena-release-${CI_COMMIT_TAG}-win64.zip
        #   link_type: package
        - name: deploy-linux-${CI_COMMIT_TAG}
          url: ${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/linux-x86_64/athena-release-${CI_COMMIT_TAG}-linux.zip
          link_type: package
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v[0-9]\.[0-9]\.[0-9](-rc.+)?/'
      when: always
  needs:
    - job: publish_job



